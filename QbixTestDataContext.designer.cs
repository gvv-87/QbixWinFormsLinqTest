#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QbixWinFormsLinqTest
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QbixTest")]
	public partial class QbixTestDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertДолжности(Должности instance);
    partial void UpdateДолжности(Должности instance);
    partial void DeleteДолжности(Должности instance);
    partial void InsertДолжности_Навыки(Должности_Навыки instance);
    partial void UpdateДолжности_Навыки(Должности_Навыки instance);
    partial void DeleteДолжности_Навыки(Должности_Навыки instance);
    partial void InsertСотрудники(Сотрудники instance);
    partial void UpdateСотрудники(Сотрудники instance);
    partial void DeleteСотрудники(Сотрудники instance);
    partial void InsertСотрудники_Должн_Навыки(Сотрудники_Должн_Навыки instance);
    partial void UpdateСотрудники_Должн_Навыки(Сотрудники_Должн_Навыки instance);
    partial void DeleteСотрудники_Должн_Навыки(Сотрудники_Должн_Навыки instance);
    partial void InsertСотрудники_Должности(Сотрудники_Должности instance);
    partial void UpdateСотрудники_Должности(Сотрудники_Должности instance);
    partial void DeleteСотрудники_Должности(Сотрудники_Должности instance);
    #endregion
		
		public QbixTestDataContext() : 
				base(global::QbixWinFormsLinqTest.Properties.Settings.Default.QbixTestConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QbixTestDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QbixTestDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QbixTestDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QbixTestDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Должности> Должностиs
		{
			get
			{
				return this.GetTable<Должности>();
			}
		}
		
		public System.Data.Linq.Table<Должности_Навыки> Должности_Навыкиs
		{
			get
			{
				return this.GetTable<Должности_Навыки>();
			}
		}
		
		public System.Data.Linq.Table<Сотрудники> Сотрудникиs
		{
			get
			{
				return this.GetTable<Сотрудники>();
			}
		}
		
		public System.Data.Linq.Table<Сотрудники_Должн_Навыки> Сотрудники_Должн_Навыкиs
		{
			get
			{
				return this.GetTable<Сотрудники_Должн_Навыки>();
			}
		}
		
		public System.Data.Linq.Table<Сотрудники_Должности> Сотрудники_Должностиs
		{
			get
			{
				return this.GetTable<Сотрудники_Должности>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Должности")]
	public partial class Должности : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Должность_Id;
		
		private string _Должность_Имя;
		
		private EntitySet<Должности_Навыки> _Должности_Навыкиs;
		
		private EntitySet<Сотрудники_Должности> _Сотрудники_Должностиs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnДолжность_IdChanging(int value);
    partial void OnДолжность_IdChanged();
    partial void OnДолжность_ИмяChanging(string value);
    partial void OnДолжность_ИмяChanged();
    #endregion
		
		public Должности()
		{
			this._Должности_Навыкиs = new EntitySet<Должности_Навыки>(new Action<Должности_Навыки>(this.attach_Должности_Навыкиs), new Action<Должности_Навыки>(this.detach_Должности_Навыкиs));
			this._Сотрудники_Должностиs = new EntitySet<Сотрудники_Должности>(new Action<Сотрудники_Должности>(this.attach_Сотрудники_Должностиs), new Action<Сотрудники_Должности>(this.detach_Сотрудники_Должностиs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Должность_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Должность_Id
		{
			get
			{
				return this._Должность_Id;
			}
			set
			{
				if ((this._Должность_Id != value))
				{
					this.OnДолжность_IdChanging(value);
					this.SendPropertyChanging();
					this._Должность_Id = value;
					this.SendPropertyChanged("Должность_Id");
					this.OnДолжность_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Должность_Имя", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Должность_Имя
		{
			get
			{
				return this._Должность_Имя;
			}
			set
			{
				if ((this._Должность_Имя != value))
				{
					this.OnДолжность_ИмяChanging(value);
					this.SendPropertyChanging();
					this._Должность_Имя = value;
					this.SendPropertyChanged("Должность_Имя");
					this.OnДолжность_ИмяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Должности_Должности_Навыки", Storage="_Должности_Навыкиs", ThisKey="Должность_Id", OtherKey="Должность_Id")]
		public EntitySet<Должности_Навыки> Должности_Навыкиs
		{
			get
			{
				return this._Должности_Навыкиs;
			}
			set
			{
				this._Должности_Навыкиs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Должности_Сотрудники_Должности", Storage="_Сотрудники_Должностиs", ThisKey="Должность_Id", OtherKey="Должность_Id")]
		public EntitySet<Сотрудники_Должности> Сотрудники_Должностиs
		{
			get
			{
				return this._Сотрудники_Должностиs;
			}
			set
			{
				this._Сотрудники_Должностиs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Должности_Навыкиs(Должности_Навыки entity)
		{
			this.SendPropertyChanging();
			entity.Должности = this;
		}
		
		private void detach_Должности_Навыкиs(Должности_Навыки entity)
		{
			this.SendPropertyChanging();
			entity.Должности = null;
		}
		
		private void attach_Сотрудники_Должностиs(Сотрудники_Должности entity)
		{
			this.SendPropertyChanging();
			entity.Должности = this;
		}
		
		private void detach_Сотрудники_Должностиs(Сотрудники_Должности entity)
		{
			this.SendPropertyChanging();
			entity.Должности = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Должности_Навыки")]
	public partial class Должности_Навыки : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Навык_Id;
		
		private string _Навык_Имя;
		
		private int _Должность_Id;
		
		private EntitySet<Сотрудники_Должн_Навыки> _Сотрудники_Должн_Навыкиs;
		
		private EntityRef<Должности> _Должности;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНавык_IdChanging(int value);
    partial void OnНавык_IdChanged();
    partial void OnНавык_ИмяChanging(string value);
    partial void OnНавык_ИмяChanged();
    partial void OnДолжность_IdChanging(int value);
    partial void OnДолжность_IdChanged();
    #endregion
		
		public Должности_Навыки()
		{
			this._Сотрудники_Должн_Навыкиs = new EntitySet<Сотрудники_Должн_Навыки>(new Action<Сотрудники_Должн_Навыки>(this.attach_Сотрудники_Должн_Навыкиs), new Action<Сотрудники_Должн_Навыки>(this.detach_Сотрудники_Должн_Навыкиs));
			this._Должности = default(EntityRef<Должности>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Навык_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Навык_Id
		{
			get
			{
				return this._Навык_Id;
			}
			set
			{
				if ((this._Навык_Id != value))
				{
					this.OnНавык_IdChanging(value);
					this.SendPropertyChanging();
					this._Навык_Id = value;
					this.SendPropertyChanged("Навык_Id");
					this.OnНавык_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Навык_Имя", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Навык_Имя
		{
			get
			{
				return this._Навык_Имя;
			}
			set
			{
				if ((this._Навык_Имя != value))
				{
					this.OnНавык_ИмяChanging(value);
					this.SendPropertyChanging();
					this._Навык_Имя = value;
					this.SendPropertyChanged("Навык_Имя");
					this.OnНавык_ИмяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Должность_Id", DbType="Int NOT NULL")]
		public int Должность_Id
		{
			get
			{
				return this._Должность_Id;
			}
			set
			{
				if ((this._Должность_Id != value))
				{
					if (this._Должности.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnДолжность_IdChanging(value);
					this.SendPropertyChanging();
					this._Должность_Id = value;
					this.SendPropertyChanged("Должность_Id");
					this.OnДолжность_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Должности_Навыки_Сотрудники_Должн_Навыки", Storage="_Сотрудники_Должн_Навыкиs", ThisKey="Навык_Id,Должность_Id", OtherKey="Навык_Id,Должность_Id")]
		public EntitySet<Сотрудники_Должн_Навыки> Сотрудники_Должн_Навыкиs
		{
			get
			{
				return this._Сотрудники_Должн_Навыкиs;
			}
			set
			{
				this._Сотрудники_Должн_Навыкиs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Должности_Должности_Навыки", Storage="_Должности", ThisKey="Должность_Id", OtherKey="Должность_Id", IsForeignKey=true)]
		public Должности Должности
		{
			get
			{
				return this._Должности.Entity;
			}
			set
			{
				Должности previousValue = this._Должности.Entity;
				if (((previousValue != value) 
							|| (this._Должности.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Должности.Entity = null;
						previousValue.Должности_Навыкиs.Remove(this);
					}
					this._Должности.Entity = value;
					if ((value != null))
					{
						value.Должности_Навыкиs.Add(this);
						this._Должность_Id = value.Должность_Id;
					}
					else
					{
						this._Должность_Id = default(int);
					}
					this.SendPropertyChanged("Должности");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Сотрудники_Должн_Навыкиs(Сотрудники_Должн_Навыки entity)
		{
			this.SendPropertyChanging();
			entity.Должности_Навыки = this;
		}
		
		private void detach_Сотрудники_Должн_Навыкиs(Сотрудники_Должн_Навыки entity)
		{
			this.SendPropertyChanging();
			entity.Должности_Навыки = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Сотрудники")]
	public partial class Сотрудники : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Сотрудник_Id;
		
		private string _Сотрудник_Фио;
		
		private EntitySet<Сотрудники_Должн_Навыки> _Сотрудники_Должн_Навыкиs;
		
		private EntitySet<Сотрудники_Должности> _Сотрудники_Должностиs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnСотрудник_IdChanging(int value);
    partial void OnСотрудник_IdChanged();
    partial void OnСотрудник_ФиоChanging(string value);
    partial void OnСотрудник_ФиоChanged();
    #endregion
		
		public Сотрудники()
		{
			this._Сотрудники_Должн_Навыкиs = new EntitySet<Сотрудники_Должн_Навыки>(new Action<Сотрудники_Должн_Навыки>(this.attach_Сотрудники_Должн_Навыкиs), new Action<Сотрудники_Должн_Навыки>(this.detach_Сотрудники_Должн_Навыкиs));
			this._Сотрудники_Должностиs = new EntitySet<Сотрудники_Должности>(new Action<Сотрудники_Должности>(this.attach_Сотрудники_Должностиs), new Action<Сотрудники_Должности>(this.detach_Сотрудники_Должностиs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Сотрудник_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Сотрудник_Id
		{
			get
			{
				return this._Сотрудник_Id;
			}
			set
			{
				if ((this._Сотрудник_Id != value))
				{
					this.OnСотрудник_IdChanging(value);
					this.SendPropertyChanging();
					this._Сотрудник_Id = value;
					this.SendPropertyChanged("Сотрудник_Id");
					this.OnСотрудник_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Сотрудник_Фио", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Сотрудник_Фио
		{
			get
			{
				return this._Сотрудник_Фио;
			}
			set
			{
				if ((this._Сотрудник_Фио != value))
				{
					this.OnСотрудник_ФиоChanging(value);
					this.SendPropertyChanging();
					this._Сотрудник_Фио = value;
					this.SendPropertyChanged("Сотрудник_Фио");
					this.OnСотрудник_ФиоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Сотрудники_Сотрудники_Должн_Навыки", Storage="_Сотрудники_Должн_Навыкиs", ThisKey="Сотрудник_Id", OtherKey="Сотрудник_Id")]
		public EntitySet<Сотрудники_Должн_Навыки> Сотрудники_Должн_Навыкиs
		{
			get
			{
				return this._Сотрудники_Должн_Навыкиs;
			}
			set
			{
				this._Сотрудники_Должн_Навыкиs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Сотрудники_Сотрудники_Должности", Storage="_Сотрудники_Должностиs", ThisKey="Сотрудник_Id", OtherKey="Сотрудник_Id")]
		public EntitySet<Сотрудники_Должности> Сотрудники_Должностиs
		{
			get
			{
				return this._Сотрудники_Должностиs;
			}
			set
			{
				this._Сотрудники_Должностиs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Сотрудники_Должн_Навыкиs(Сотрудники_Должн_Навыки entity)
		{
			this.SendPropertyChanging();
			entity.Сотрудники = this;
		}
		
		private void detach_Сотрудники_Должн_Навыкиs(Сотрудники_Должн_Навыки entity)
		{
			this.SendPropertyChanging();
			entity.Сотрудники = null;
		}
		
		private void attach_Сотрудники_Должностиs(Сотрудники_Должности entity)
		{
			this.SendPropertyChanging();
			entity.Сотрудники = this;
		}
		
		private void detach_Сотрудники_Должностиs(Сотрудники_Должности entity)
		{
			this.SendPropertyChanging();
			entity.Сотрудники = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Сотрудники_Должн_Навыки")]
	public partial class Сотрудники_Должн_Навыки : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Сотрудник_Id;
		
		private int _Должность_Id;
		
		private int _Навык_Id;
		
		private EntityRef<Должности_Навыки> _Должности_Навыки;
		
		private EntityRef<Сотрудники> _Сотрудники;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnСотрудник_IdChanging(int value);
    partial void OnСотрудник_IdChanged();
    partial void OnДолжность_IdChanging(int value);
    partial void OnДолжность_IdChanged();
    partial void OnНавык_IdChanging(int value);
    partial void OnНавык_IdChanged();
    #endregion
		
		public Сотрудники_Должн_Навыки()
		{
			this._Должности_Навыки = default(EntityRef<Должности_Навыки>);
			this._Сотрудники = default(EntityRef<Сотрудники>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Сотрудник_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Сотрудник_Id
		{
			get
			{
				return this._Сотрудник_Id;
			}
			set
			{
				if ((this._Сотрудник_Id != value))
				{
					if (this._Сотрудники.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnСотрудник_IdChanging(value);
					this.SendPropertyChanging();
					this._Сотрудник_Id = value;
					this.SendPropertyChanged("Сотрудник_Id");
					this.OnСотрудник_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Должность_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Должность_Id
		{
			get
			{
				return this._Должность_Id;
			}
			set
			{
				if ((this._Должность_Id != value))
				{
					if (this._Должности_Навыки.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnДолжность_IdChanging(value);
					this.SendPropertyChanging();
					this._Должность_Id = value;
					this.SendPropertyChanged("Должность_Id");
					this.OnДолжность_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Навык_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Навык_Id
		{
			get
			{
				return this._Навык_Id;
			}
			set
			{
				if ((this._Навык_Id != value))
				{
					if (this._Должности_Навыки.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnНавык_IdChanging(value);
					this.SendPropertyChanging();
					this._Навык_Id = value;
					this.SendPropertyChanged("Навык_Id");
					this.OnНавык_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Должности_Навыки_Сотрудники_Должн_Навыки", Storage="_Должности_Навыки", ThisKey="Навык_Id,Должность_Id", OtherKey="Навык_Id,Должность_Id", IsForeignKey=true)]
		public Должности_Навыки Должности_Навыки
		{
			get
			{
				return this._Должности_Навыки.Entity;
			}
			set
			{
				Должности_Навыки previousValue = this._Должности_Навыки.Entity;
				if (((previousValue != value) 
							|| (this._Должности_Навыки.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Должности_Навыки.Entity = null;
						previousValue.Сотрудники_Должн_Навыкиs.Remove(this);
					}
					this._Должности_Навыки.Entity = value;
					if ((value != null))
					{
						value.Сотрудники_Должн_Навыкиs.Add(this);
						this._Навык_Id = value.Навык_Id;
						this._Должность_Id = value.Должность_Id;
					}
					else
					{
						this._Навык_Id = default(int);
						this._Должность_Id = default(int);
					}
					this.SendPropertyChanged("Должности_Навыки");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Сотрудники_Сотрудники_Должн_Навыки", Storage="_Сотрудники", ThisKey="Сотрудник_Id", OtherKey="Сотрудник_Id", IsForeignKey=true)]
		public Сотрудники Сотрудники
		{
			get
			{
				return this._Сотрудники.Entity;
			}
			set
			{
				Сотрудники previousValue = this._Сотрудники.Entity;
				if (((previousValue != value) 
							|| (this._Сотрудники.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Сотрудники.Entity = null;
						previousValue.Сотрудники_Должн_Навыкиs.Remove(this);
					}
					this._Сотрудники.Entity = value;
					if ((value != null))
					{
						value.Сотрудники_Должн_Навыкиs.Add(this);
						this._Сотрудник_Id = value.Сотрудник_Id;
					}
					else
					{
						this._Сотрудник_Id = default(int);
					}
					this.SendPropertyChanged("Сотрудники");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Сотрудники_Должности")]
	public partial class Сотрудники_Должности : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Сотрудник_Id;
		
		private int _Должность_Id;
		
		private EntityRef<Должности> _Должности;
		
		private EntityRef<Сотрудники> _Сотрудники;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnСотрудник_IdChanging(int value);
    partial void OnСотрудник_IdChanged();
    partial void OnДолжность_IdChanging(int value);
    partial void OnДолжность_IdChanged();
    #endregion
		
		public Сотрудники_Должности()
		{
			this._Должности = default(EntityRef<Должности>);
			this._Сотрудники = default(EntityRef<Сотрудники>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Сотрудник_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Сотрудник_Id
		{
			get
			{
				return this._Сотрудник_Id;
			}
			set
			{
				if ((this._Сотрудник_Id != value))
				{
					if (this._Сотрудники.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnСотрудник_IdChanging(value);
					this.SendPropertyChanging();
					this._Сотрудник_Id = value;
					this.SendPropertyChanged("Сотрудник_Id");
					this.OnСотрудник_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Должность_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Должность_Id
		{
			get
			{
				return this._Должность_Id;
			}
			set
			{
				if ((this._Должность_Id != value))
				{
					if (this._Должности.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnДолжность_IdChanging(value);
					this.SendPropertyChanging();
					this._Должность_Id = value;
					this.SendPropertyChanged("Должность_Id");
					this.OnДолжность_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Должности_Сотрудники_Должности", Storage="_Должности", ThisKey="Должность_Id", OtherKey="Должность_Id", IsForeignKey=true)]
		public Должности Должности
		{
			get
			{
				return this._Должности.Entity;
			}
			set
			{
				Должности previousValue = this._Должности.Entity;
				if (((previousValue != value) 
							|| (this._Должности.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Должности.Entity = null;
						previousValue.Сотрудники_Должностиs.Remove(this);
					}
					this._Должности.Entity = value;
					if ((value != null))
					{
						value.Сотрудники_Должностиs.Add(this);
						this._Должность_Id = value.Должность_Id;
					}
					else
					{
						this._Должность_Id = default(int);
					}
					this.SendPropertyChanged("Должности");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Сотрудники_Сотрудники_Должности", Storage="_Сотрудники", ThisKey="Сотрудник_Id", OtherKey="Сотрудник_Id", IsForeignKey=true)]
		public Сотрудники Сотрудники
		{
			get
			{
				return this._Сотрудники.Entity;
			}
			set
			{
				Сотрудники previousValue = this._Сотрудники.Entity;
				if (((previousValue != value) 
							|| (this._Сотрудники.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Сотрудники.Entity = null;
						previousValue.Сотрудники_Должностиs.Remove(this);
					}
					this._Сотрудники.Entity = value;
					if ((value != null))
					{
						value.Сотрудники_Должностиs.Add(this);
						this._Сотрудник_Id = value.Сотрудник_Id;
					}
					else
					{
						this._Сотрудник_Id = default(int);
					}
					this.SendPropertyChanged("Сотрудники");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
